snippet consumerW "consumer widget" b
class ${1} extends ConsumerWidget {
  const ${1}({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Container();
  }
}
endsnippet

snippet tsu "adds set up method to test" b
setUp(() {

});
endsnippet

snippet navigator "Get navigator of context" b
final navigator = Navigator.of(context);
endsnippet

snippet riverViewModel "riverpod style view model" b
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:goodbadday/common/architecture/view/view_model.dart';

final ${1}Provider =
    StateNotifierProvider.autoDispose<${2}, ${3}>(
  (ref) => ${2}(),
);

class ${2} extends ViewModel<${3}> {
  ${2}() : super(null);

  @override
  void onInit() {
    // TODO: implement onInit
  }
}
endsnippet

snippet constConstructor "constant constructor" b
const ${1}({Key? key}): super(key:key);
endsnippet

snippet tw "test widget" b
testWidgets('${1}', (WidgetTester tester) async {
  ${0}
});
endsnippet

snippet grp "unit test group" b
group('${1}', () {
  ${0}
});
endsnippet

snippet tst "unit test" b
test('${1}', () {
  ${0}
});
endsnippet

snippet tsta "async unit test" b
test('${1}', () async {
  ${0}
});
endsnippet

snippet mock "create mockito class" b
class Mock${1} extends Mock implements ${1} {}
endsnippet

snippet jsbuilt "create JsonSerializable class" b
import 'package:json_annotation/json_annotation.dart';

part '${1:`!v expand('%:t:r')`.g.dart}';

@JsonSerializable()
class ${1} {

  factory ${1}.fromJson(Map<String, dynamic> json) =>
    _\$${1}FromJson(json);

  Map<String, dynamic> toJson() => _\$${1}ToJson(this);
}
endsnippet

snippet toJson "Json methods" b
Map<String, dynamic> toMap() {
  return {};
}

factory ${1}.fromMap(Map<String,dynamic> json){
  return ${1}();
}

factory ${1}.fromJson(String json) => json.decode(json);

String toJson() => json.convert(${1}.toMap);
endsnippet

snippet testFile "unit test file" b
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('${1}', (){
    test('${2}', () {
      ${0}
    });
  });
}
endsnippet

snippet wtestFile "widget test file" b
import 'package:flutter_test/flutter_test.dart';

void main() {
  testWidgets('${1}', (WidgetTester tester) async {
    ${0}
  });
}
endsnippet

snippet nbloc "The original Bloc Pattern implementation without packages" b
import 'dart:async';

abstract class ${1} {}

class ${2} {
  const ${2}();
}

class ${3} {
  final _stateController = StreamController<${2}>();

  Stream<${2}> get state => _stateController.stream;

  final _eventController = StreamController<${1}>();

  Sink<${1}> get eventSink => _eventController.sink;

  ${3}() {
    _eventController.stream.listen(_mapEventToState);
  }

  void _mapEventToState(${1} event) {
    // TODO: Add Logic
    // Example:
    // if (event is MySpecificEvent) {
    //   _stateController.sink.add(MySpecificState());
    // }
  }

  void dispose() {
    _stateController.close();
    _eventController.close();
  }
}

class ${4} extends ${1} {}

class ${5} extends ${2} {
  const ${5}();
}
endsnippet

snippet bloc "Flutter Bloc pattern implementation example" b
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

/// Events
abstract class MyEvent {}

class IncrementEvent extends MyEvent {}

class DecrementEvent extends MyEvent {}

/// State
abstract class MyState {}

class IncrementState extends MyState {}

class DecrementState extends MyState {}

/// Bloc
class MyBloc extends Bloc<MyEvent, MyState> {
  MyBloc() : super(InitialMyState());

  @override
  Stream<MyState> mapEventToState(MyEvent event) async* {
    if (event is IncrementEvent) {
      yield IncrementState();
    } else if (event is DecrementEvent) {
      yield DecrementState();
    }
  }
}

endsnippet

snippet inheritedW "InheritedWidget" b
class ${1} extends InheritedWidget {
  const ${1}({super.key, required this.child}) : super(child: child);
  final Widget child;

  static ${1}? of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<${1}>();
  }

  @override
  bool updateShouldNotify(${1} oldWidget) {
    return false;
  }
}
endsnippet

snippet mateapp "Material App Widget" b
import 'package:flutter/material.dart';

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material App',
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Material App Bar'),
        ),
        body: const Center(
          child: Text('Hello World'),
        ),
      ),
    );
  }
}
endsnippet

snippet f-test "" b
test(
  "Test",
  () {

  },
);
endsnippet

snippet valueListenable "ValueListenableBuilder Widget" b
ValueListenableBuilder(
  valueListenable: ${1},
  builder: (BuildContext context, dynamic value, Widget? child) {
    return Container();
  }
)
endsnippet

snippet reassemble "StatefulWidget method" b
@override
void reassemble(){
  ${0}
  super.reassemble();
}
endsnippet

snippet useEffect "useEffect hook method" b
useEffect(() {
  ${0}
  return null;
}, <Object?>[]);
endsnippet

snippet init "StatefulWidget method" b
@override
void initState(){
  super.initState();
}
endsnippet

snippet dis "StatefulWidget method" b
@override
void dispose(){
  ${0}
  super.dispose();
}
endsnippet

snippet didC "StatefulWidget method" b
@override
void didChangeDependencies() {
  ${0}
  super.didChangeDependencies();
}
endsnippet

snippet statefulW "Stateful Widget" b
class ${1} extends StatefulWidget {
  const ${1}({super.key});

  @override
  State<${1}> createState() => _${1}State();
}
class _${1}State extends State<${1}> {

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
endsnippet

snippet statelessW "Stateless Widget" b
class ${1} extends StatelessWidget {
  const ${1}({super.key});

  @override
  Widget build(BuildContext context) {
    return Container();
  }
}
endsnippet
